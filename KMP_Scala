object KnuthMorrisPrattApp {
  def main(args: Array[String]): Unit = {
    val startTimeMillis = System.currentTimeMillis()
    val kb = 1024
    val runtime = Runtime.getRuntime
    val input_text = "abababaa"
    val input_pattern = "aba"
    println("input_text :",input_text)
    println("input_pattern :",input_pattern)
    println(kmpmatch(input_pattern, input_text))
    val endTimeMillis = System.currentTimeMillis()
    val durationSeconds = endTimeMillis - startTimeMillis
    println("Used Time:  "+durationSeconds)
    println("Used Memory:  " + (runtime.totalMemory - runtime.freeMemory) / kb)
  }
  def kmpmatch(myPattern: String, myText: String): Int = {
    val dynamic = compute_prefix(myPattern)
    myText.indices
      .foldLeft(-1, 0) {
        case ((foundIndex, x), i) if foundIndex > 0 => (foundIndex, 0)
        case ((foundIndex, x), i) => {
          val stepsX = Stream.iterate(x)(x => dynamic(x - 1))
          val lowerX = stepsX
            .find(x =>
              x == 0 || myPattern(x)
                == myText(i)
            )
            .get
          val newX =
            if (myPattern(lowerX) == myText(i))
              lowerX + 1
            else lowerX
          if (newX == myPattern.length) (i - newX + 1, 0) else (-1, newX)
        }
      }
      ._1
  }
  def compute_prefix(pattern: String): Vector[Int] = {
    pattern
      .drop(1)
      .foldLeft(0, Vector(0)) {
        case ((initialValue, prefixT), currentCharacter) => {
          val lowerValue = Stream
            .iterate(initialValue)(initialValue => prefixT(initialValue - 1))
            .find(initialValue =>
              initialValue == 0 || pattern(initialValue) == currentCharacter
            )
            .get
          val newValue =
            if (pattern(lowerValue) == currentCharacter) lowerValue + 1
            else lowerValue
          (newValue, prefixT :+ newValue)
        }
      }
      ._2
  }
}


